/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array map;
    static Array bits;

    /** Initializes the Screen. */
    function void init() {
        let map = 16384;
        let color = true;

        let bits = Array.new(17);
        let bits[0] = 1;
        let bits[1] = 2;
        let bits[2] = 4;
        let bits[3] = 8;
        let bits[4] = 16;
        let bits[5] = 32;
        let bits[6] = 64;
        let bits[7] = 128;
        let bits[8] = 256;
        let bits[9] = 512;
        let bits[10] = 1024;
        let bits[11] = 2048;
        let bits[12] = 4096;
        let bits[13] = 8192;
        let bits[14] = 16384;
        let bits[15] = 16384 + 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        while (i < 8192) {
            let map[i] = false;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, m;

        let addr = (y * 32) + (x / 16);
        let m = bits[x & 15];

        if (color) {
            let map[addr] = map[addr] | m;
        } else {
            let map[addr] = map[addr] & ~m;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int tmp, dx, dy, a, b, diff;

        // if (x1 > x2) {
        //     let tmp = x1;
        //     let x1 = x2;
        //     let x2 = tmp;

        //     let tmp = y1;
        //     let y1 = y2;
        //     let y2 = tmp;
        // }

        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dx = 0) {
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        } else {
            if (dy = 0) {
                do Screen.drawHorizontalLine(x1, x2, y1);
                return;
            } 
        }

        if (y2 > y1) {
            while (~(a > dx) & ~(b > dy)) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff < 0) {
                    let b = b + 1;
                    let diff = diff + dx;
                } else {
                    let a = a + 1;
                    let diff = diff - dy;
                }
            }
        } else {
            let dy = -dy;
            while (~(a > dx) & ~(b > dy)) {
                do Screen.drawPixel(x1 + a, y1 - b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int tmp, addr1, addr2, m1, m2, m, a1, a2;

        // if (x1 > x2) {
        //     let tmp = x1;
        //     let x1 = x2;
        //     let x2 = tmp;
        // }
        // if (y1 > y2) {
        //     let tmp = y1;
        //     let y1 = y2;
        //     let y2 = tmp;
        // }

        let addr1 = (y1 * 32) + (x1 / 16);
        let addr2 = (y1 * 32) + (x2 / 16);

        let m1 = ~(bits[x1 & 15] - 1);
        let m2 = bits[x2 & 15 + 1] - 1;
        let m = m1 & m2;

        while (~(y2 < y1)) {
            let a1 = addr1;
            let a2 = addr2;

            if (a1 = a2) {
                if (color) {
                    let map[a1] = map[a1] | m;
                } else {
                    let map[a1] = map[a1] & ~m;
                }
            } else {
                if (color) {
                    let map[a1] = map[a1] | m1;
                    let map[a2] = map[a2] | m2;
                } else {
                    let map[a1] = map[a1] & ~m1;
                    let map[a2] = map[a2] & ~m2;
                }

                if ((a2 - a1) > 1) {
                    let a1 = a1 + 1;
                    while (a2 > a1) {
                        let map[a1] = color;
                        let a1 = a1 + 1;
                    }
                }
            }
            let addr1 = addr1 + 32;
            let addr2 = addr2 + 32;
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int i, j, k; 

        let j = r; 
        let k = 3 - (r + r); 

        do Screen.drawHorizontalLine(x - r, x + r, y); 

        while (j > i) { 
            if (k < 0) { 
                let k = k + 6 + i + i + i + i; 
                let i = i + 1; 
            } else { 
                if ((k > 0) & (j > i)) { 
                        let j = j - 1; 
                        let k = (k + 4) - (j + j + j + j); 
                } 
            } 

            do Screen.drawHorizontalLine(x - i, x + i, y + j); 
            do Screen.drawHorizontalLine(x - i, x + i, y - j); 
            do Screen.drawHorizontalLine(x - j, x + j, y + i); 
            do Screen.drawHorizontalLine(x - j, x + j, y - i); 

        } 
        return; 
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int tmp, addr1, addr2, m1, m2, m;

        // if (x1 > x2) {
        //     let tmp = x1;
        //     let x1 = x2;
        //     let x2 = tmp;
        // }

        let addr1 = (y * 32) + (x1 / 16);
        let addr2 = (y * 32) + (x2 / 16);

        let m1 = ~(bits[x1 & 15] - 1);
        let m2 = bits[x2 & 15 + 1] - 1;

        if (addr1 = addr2) {
            let m = m1 & m2;
            if (color) {
                let map[addr1] = map[addr1] | m;
            } else {
                let map[addr1] = map[addr1] & ~m;
            }
            return;
        } else {
            if (color) {
                let map[addr1] = map[addr1] | m1;
                let map[addr2] = map[addr2] | m2;
            } else {
                let map[addr1] = map[addr1] & ~m1;
                let map[addr2] = map[addr2] & ~m2;
            }
        }

        if ((addr2 - addr1) > 1) {
            let addr1 = addr1 + 1;
            while (addr2 > addr1) {
                let map[addr1] = color;
                let addr1 = addr1 + 1;
            }
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int tmp, addr, m;

        // if (y1 > y2) {
        //     let tmp = y1;
        //     let y1 = y2;
        //     let y2 = tmp;
        // }

        let addr = (y1 * 32) + (x / 16);
        let m = bits[x & 15];

        while (~(y1 > y2)) {
            if (color) {
                let map[addr] = map[addr] | m;
            } else {
                let map[addr] = map[addr] & ~m;
            }

            let y1 = y1 + 1;
            let addr = addr + 32;
        }
        return;
    }
}
