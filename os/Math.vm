function Math.init 0
	push constant 16
	call Array.new 1
	pop static 0
	push constant 0
	push static 0
	add
	push constant 1
	pop temp 0
	pop pointer 1
	push temp 0
	pop that 0
	push constant 1
	push static 0
	add
	push constant 2
	pop temp 0
	pop pointer 1
	push temp 0
	pop that 0
	push constant 2
	push static 0
	add
	push constant 4
	pop temp 0
	pop pointer 1
	push temp 0
	pop that 0
	push constant 3
	push static 0
	add
	push constant 8
	pop temp 0
	pop pointer 1
	push temp 0
	pop that 0
	push constant 4
	push static 0
	add
	push constant 16
	pop temp 0
	pop pointer 1
	push temp 0
	pop that 0
	push constant 5
	push static 0
	add
	push constant 32
	pop temp 0
	pop pointer 1
	push temp 0
	pop that 0
	push constant 6
	push static 0
	add
	push constant 64
	pop temp 0
	pop pointer 1
	push temp 0
	pop that 0
	push constant 7
	push static 0
	add
	push constant 128
	pop temp 0
	pop pointer 1
	push temp 0
	pop that 0
	push constant 8
	push static 0
	add
	push constant 256
	pop temp 0
	pop pointer 1
	push temp 0
	pop that 0
	push constant 9
	push static 0
	add
	push constant 512
	pop temp 0
	pop pointer 1
	push temp 0
	pop that 0
	push constant 10
	push static 0
	add
	push constant 1024
	pop temp 0
	pop pointer 1
	push temp 0
	pop that 0
	push constant 11
	push static 0
	add
	push constant 2048
	pop temp 0
	pop pointer 1
	push temp 0
	pop that 0
	push constant 12
	push static 0
	add
	push constant 4096
	pop temp 0
	pop pointer 1
	push temp 0
	pop that 0
	push constant 13
	push static 0
	add
	push constant 8192
	pop temp 0
	pop pointer 1
	push temp 0
	pop that 0
	push constant 14
	push static 0
	add
	push constant 16384
	pop temp 0
	pop pointer 1
	push temp 0
	pop that 0
	push constant 15
	push static 0
	add
	push constant 16384
	push constant 16384
	add
	pop temp 0
	pop pointer 1
	push temp 0
	pop that 0
	push constant 0
	return
function Math.powersOfTwo 0
	push argument 0
	push static 0
	add
	pop pointer 1
	push that 0
	return
function Math.bit 0
	push argument 0
	push argument 1
	push static 0
	add
	pop pointer 1
	push that 0
	and
	push constant 0
	eq
	not
	return
function Math.multiply 3
label Math_3_1_0
	push local 0
	push constant 16
	lt
	not
	if-goto Math_3_1_1
	push argument 1
	push local 0
	push static 0
	add
	pop pointer 1
	push that 0
	and
	push constant 0
	eq
	not
	not
	if-goto Math_4_2_0
	push local 2
	push argument 0
	add
	pop local 2
label Math_4_2_0
	push argument 0
	push argument 0
	add
	pop argument 0
	push local 0
	push constant 1
	add
	pop local 0
	goto Math_3_1_0
label Math_3_1_1
	push local 2
	return
function Math.divide 5
	push argument 0
	push constant 0
	lt
	not
	if-goto Math_5_1_0
	push argument 0
	neg
	pop argument 0
	push constant 1
	neg
	pop local 3
label Math_5_1_0
	push argument 1
	push constant 0
	lt
	not
	if-goto Math_6_1_0
	push argument 1
	neg
	pop argument 1
	push constant 1
	neg
	pop local 4
label Math_6_1_0
	push argument 1
	push argument 0
	gt
	not
	if-goto Math_7_1_0
	push constant 0
	return
label Math_7_1_0
	push argument 0
	push argument 1
	push argument 1
	add
	call Math.divide 2
	pop local 0
	push local 0
	push local 0
	add
	pop local 1
	push argument 0
	push local 1
	push argument 1
	call Math.multiply 2
	sub
	push argument 1
	lt
	not
	if-goto Math_8_1_0
	push local 1
	pop local 2
	goto Math_8_1_1
label Math_8_1_0
	push local 1
	push constant 1
	add
	pop local 2
label Math_8_1_1
	push local 3
	push local 4
	eq
	not
	if-goto Math_9_1_0
	push local 2
	return
label Math_9_1_0
	push local 2
	neg
	return
function Math.sqrt 4
	push constant 0
	pop local 0
	push constant 7
	pop local 1
label Math_10_1_0
	push local 1
	push constant 0
	lt
	not
	not
	if-goto Math_10_1_1
	push local 0
	push local 1
	push static 0
	add
	pop pointer 1
	push that 0
	add
	pop local 2
	push local 2
	push local 2
	call Math.multiply 2
	pop local 3
	push local 3
	push argument 0
	gt
	not
	push local 3
	push constant 0
	gt
	and
	not
	if-goto Math_11_2_0
	push local 2
	pop local 0
label Math_11_2_0
	push local 1
	push constant 1
	sub
	pop local 1
	goto Math_10_1_0
label Math_10_1_1
	push local 0
	return
function Math.max 0
	push argument 0
	push argument 1
	gt
	not
	if-goto Math_12_1_0
	push argument 0
	return
label Math_12_1_0
	push argument 1
	return
function Math.min 0
	push argument 0
	push argument 1
	lt
	not
	if-goto Math_13_1_0
	push argument 0
	return
label Math_13_1_0
	push argument 1
	return
function Math.abs 0
	push argument 0
	push constant 0
	lt
	not
	if-goto Math_14_1_0
	push argument 0
	neg
	pop argument 0
label Math_14_1_0
	push argument 0
	return
